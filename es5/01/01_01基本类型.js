var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var isDone = false; // 布尔型
var str = '字符串';
var nun = 1; //    数字类型
var arr1 = [1, 2, 3, 4, 5]; //数组
var arr = [1, 2, 3, 4, 5]; // 数组
//元组 tuple
var x;
x = ['string', 1];
//枚举 enum
/*
枚举
enum类型是对JavaScript标准数据类型的一个补充。
像C#等其它语言一样，使用枚举类型可以为一组数值赋予友好的名字。


*/
var Color;
(function (Color) {
    Color[Color["Red"] = 0] = "Red";
    Color[Color["Grren"] = 1] = "Grren";
    Color[Color["Blue"] = 2] = "Blue";
})(Color || (Color = {}));
var c = Color.Grren;
console.log('Color=', Color);
console.log('c=', c);
/*
默认情况下，从0开始为元素编号。
你也可以手动的指定成员的数值。
例如，我们将上面的例子改成从 1开始编号：
如果不手动赋值那么下一个的值就是上一个的值加1
*/
var Style;
(function (Style) {
    Style[Style["width"] = 1] = "width";
    Style[Style["heihgt"] = 100] = "heihgt";
    Style[Style["padding"] = 200] = "padding";
    Style[Style["margin"] = 2] = "margin";
})(Style || (Style = {}));
//赋值
var s = Style.heihgt;
console.log('Style=', Style);
console.log('s=', s);
/*
any
有时候，我们会想要为那些在编程阶段还不清楚类型的变量指定一个类型。
这些值可能来自于动态的内容，比如来自用户输入或第三方代码库。
这种情况下，我们不希望类型检查器对这些值进行检查而是直接让它们通过编译阶段的检查。
那么我们可以使用 any类型来标记这些变量：
*/
var notSure = 4;
notSure = 'str';
notSure = {
    name: 'ygs',
    address: 'g x'
};
//当你只知道一部分数据的类型时，any类型也是有用的。 比如，你有一个数组，它包含了不同的类型的数据：
var list = [
    1,
    true,
    'str',
    {
        name: 'any'
    },
    ,
    [
        {
            title: '标题1'
        },
        {
            title: '标题2'
        },
    ],
];
//Void
/*
某种程度上来说，void类型像是与any类型相反，它表示没有任何类型。
当一个函数没有返回值时，你通常会见到其返回值类型是 void：
*/
//没有返回值
function warnUser() {
    console.log('warnUser');
}
//声明一个void类型的变量没有什么大用，因为你只能为它赋予undefined和null：
var unusable = null;
var un = undefined;
/*
Null 和 Undefined
TypeScript里，undefined和null两者各自有自己的类型分别叫做undefined和null。
 和 void相似，它们的本身的类型用处不是很大：
*/
var u = undefined;
var n = null;
function printLabel(labelledObj) {
    //返回label
    return labelledObj.value;
}
//value 设置为number数字类型
var value = printLabel({
    label: 'label',
    value: 1
});
console.log('value==', value);
function createSquareConfig(config) {
    return __assign({}, config);
}
var square = createSquareConfig({
    color: 'red',
    name: 'Square name'
});
console.log('square=', square);
/*
TypeScript具有ReadonlyArray<T>类型，它与Array<T>相似，只是把所有可变方法去掉了
，因此可以确保数组创建后再也不能被修改：
*/
var Rarr = [1, 2, 3, 4];
var ra = Rarr;
/*

上面代码的最后一行，
可以看到就算把整个ReadonlyArray赋值到一个普通数组也是不可以的。
 但是你可以用类型断言重写：
*/
Rarr = ra;
//只读对象
var Obj = { name: 'name', address: 'g x' };
var RObj = Obj;
console.log('RObj==', RObj);

//# sourceMappingURL=data:application/json;charset=utf8;base64,
