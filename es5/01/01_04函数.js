/*
函数类型
为函数定义类型
让我们为上面那个函数添加类型：
*/
function add(x, y) {
    return x + y;
}
var myAdd = function (x, y) {
    return x + y;
};
/*
书写完整函数类型
现在我们已经为函数指定了类型，下面让我们写出函数的完整类型。
*/
var myAdd1 = function (x, y) {
    return x + y;
};
var myAdd2 = function (x, y) {
    return x + y;
};
/*
函数类型包含两部分：参数类型和返回值类型。
当写出完整函数类型的时候，这两部分都是需要的。
我们以参数列表的形式写出参数类型，为每个参数指定一个名字和类型。
这个名字只是为了增加可读性。 我们也可以这么写：


只要参数类型是匹配的，那么就认为它是有效的函数类型，而不在乎参数名是否正确。
第二部分是返回值类型。 对于返回值，我们在函数和返回值类型之前使用( =>)符号，使之清晰明了。
如之前提到的，返回值类型是函数类型的必要部分，如果函数没有返回任何值，你也必须指定返回值类型为 void而不能留空。
函数的类型只是由参数类型和返回值组成的。 函数中使用的捕获变量不会体现在类型里。
实际上，这些变量是函数的隐藏状态并不是组成API的一部分。

*/
var myAdd3 = function (x, y) {
    return x + y;
};
/*
推断类型
尝试这个例子的时候，
你会发现如果你在赋值语句的一边指定了类型但是另一边没有类型的话，
TypeScript编译器会自动识别出类型：
这叫做“按上下文归类”，是类型推论的一种。 它帮助我们更好地为程序指定类型。
*/
// myAdd has the full function type
var myAdd4 = function (x, y) {
    return x + y;
};
// The parameters `x` and `y` have the type number
var myAdd5 = function (x, y) {
    return x + y;
};
/*
可选参数和默认参数
    TypeScript里的每个函数参数都是必须的。
    这不是指不能传递 null或undefined作为参数，
    而是说编译器检查用户是否为每个参数都传入了值。
    编译器还会假设只有这些参数会被传递进函数。
    简短地说，传递给一个函数的参数个数必须与函数期望的参数个数一致。
*/
function buildName(firstName, lastName) {
    return firstName + ' ' + lastName;
}
// let result1 = buildName("Bob");                  // error, too few parameters
// let result2 = buildName("Bob", "Adams", "Sr.");  // error, too many parameters
var result3 = buildName('Bob', 'Adams'); // ah, just right
/*
JavaScript里，每个参数都是可选的，可传可不传。
    没传参的时候，它的值就是undefined。
    在TypeScript里我们可以在参数名旁使用 ?实现可选参数的功能。
    比如，我们想让last name是可选的：
*/
function buildName1(firstName, lastName) {
    if (lastName)
        return firstName + ' ' + lastName;
    else
        return firstName;
}
var result1_1 = buildName1('Bob'); // works correctly now
// let result2_1 = buildName1("Bob", "Adams", "Sr.");  // error, too many parameters
var result3_1 = buildName1('Bob', 'Adams'); // ah, just right
/*

可选参数必须跟在必须参数后面。
如果上例我们想让first name是可选的，那么就必须调整它们的位置，把first name放在后面。
在TypeScript里，我们也可以为参数提供一个默认值当用户没有传递这个参数或传递的值是undefined时。
它们叫做有默认初始化值的参数。 让我们修改上例，把last name的默认值设置为"Smith"。
*/
function buildName2(firstName, lastName) {
    if (lastName === void 0) { lastName = 'Smith'; }
    return firstName + ' ' + lastName;
}
var result1_2 = buildName2('Bob'); // works correctly now, returns "Bob Smith"
var result2_2 = buildName2('Bob', undefined); // still works, also returns "Bob Smith"
// let result3_2 = buildName2('Bob', 'Adams', 'Sr.'); // error, too many parameters
var result4_2 = buildName2('Bob', 'Adams'); // ah, just right
console.log('result2_2=', result2_2);
/*
在所有必须参数后面的带默认初始化的参数都是可选的，
与可选参数一样，在调用函数的时候可以省略。
也就是说可选参数与末尾的默认参数共享参数类型。
*/
function buildName3(firstName, lastName) {
    // ...
}
/*
共享同样的类型(firstName: string, lastName?: string) => string。
默认参数的默认值消失了，只保留了它是一个可选参数的信息。

与普通可选参数不同的是，
带默认值的参数不需要放在必须参数的后面。
如果带默认值的参数出现在必须参数前面，用户必须明确的传入 undefined值来获得默认值。
例如，我们重写最后一个例子，让 firstName是带默认值的参数：
*/
/*
剩余参数
必要参数，默认参数和可选参数有个共同点：它们表示某一个参数。
有时，你想同时操作多个参数，或者你并不知道会有多少参数传递进来。
在JavaScript里，你可以使用 arguments来访问所有传入的参数。
在TypeScript里，你可以把所有参数收集到一个变量里：



剩余参数会被当做个数不限的可选参数。 可以一个都没有，同样也可以有任意个。
编译器创建参数数组，名字是你在省略号（ ...）后面给定的名字，你可以在函数体内使用这个数组。
这个省略号也会在带有剩余参数的函数类型定义上使用到：
*/
function buildName4(firstName) {
    var restOfName = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        restOfName[_i - 1] = arguments[_i];
    }
    return firstName + ' ' + restOfName.join(' ');
}
var employeeName = buildName4('Joseph', 'Samuel', 'Lucas', 'MacKinzie');
// restOfName 数组类型
function buildName5(firstName) {
    var restOfName = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        restOfName[_i - 1] = arguments[_i];
    }
    return firstName + ' ' + restOfName.join(' ');
}
var buildNameFun = buildName5;
/*
this和箭头函数
JavaScript里，this的值在函数被调用的时候才会指定。
这是个既强大又灵活的特点，但是你需要花点时间弄清楚函数调用的上下文是什么。
但众所周知，这不是一件很简单的事，尤其是在返回一个函数或将函数当做参数传递的时候。
下面看一个例子：
*/
// let deck = {
//     suits: ['hearts', 'spades', 'clubs', 'diamonds'],
//     cards: Array(52),
//     createCardPicker: function () {
//         return function () {
//             let pickedCard = Math.floor(Math.random() * 52);
//             let pickedSuit = Math.floor(pickedCard / 13);
//             return { suit: this.suits[pickedSuit], card: pickedCard % 13 };
//         };
//     },
// };
// let cardPicker = deck.createCardPicker();
// let pickedCard = cardPicker();
// console.log('card: ' + pickedCard.card + ' of ' + pickedCard.suit);
/*
可以看到createCardPicker是个函数，并且它又返回了一个函数。
如果我们尝试运行这个程序，会发现它并没有弹出对话框而是报错了。
因为 createCardPicker返回的函数里的this被设置成了window而不是deck对象。
因为我们只是独立的调用了 cardPicker()。
顶级的非方法式调用会将 this视为window。
（注意：在严格模式下， this为undefined而不是window）。

为了解决这个问题，我们可以在函数被返回时就绑好正确的this。
这样的话，无论之后怎么使用它，都会引用绑定的‘deck’对象。
我们需要改变函数表达式来使用ECMAScript 6箭头语法。
箭头函数能保存函数创建时的 this值，而不是调用时的值：
*/
var deck1 = {
    suits: ["hearts", "spades", "clubs", "diamonds"],
    cards: Array(52),
    createCardPicker: function () {
        var _this = this;
        // NOTE: the line below is now an arrow function, allowing us to capture 'this' right here
        return function () {
            var pickedCard = Math.floor(Math.random() * 52);
            var pickedSuit = Math.floor(pickedCard / 13);
            console.log('pickedSuit=', pickedSuit);
            console.log('pickedCard=', pickedCard);
            return { suit: _this.suits[pickedSuit], card: pickedCard % 13 };
        };
    }
};
var cardPicker1 = deck1.createCardPicker();
var pickedCard1 = cardPicker1();
console.log("card: " + pickedCard1.card + " of " + pickedCard1.suit);
/*
this参数
不幸的是，this.suits[pickedSuit]的类型依旧为any。
这是因为 this来自对象字面量里的函数表达式。
修改的方法是，提供一个显式的 this参数。
this参数是个假的参数，它出现在参数列表的最前面：

*/
function f() {
    // make sure `this` is unusable in this standalone function
}
var deck2 = {
    suits: ["hearts", "spades", "clubs", "diamonds"],
    cards: Array(52),
    // NOTE: The function now explicitly specifies that its callee must be of type Deck
    createCardPicker: function () {
        var _this = this;
        return function () {
            var pickedCard = Math.floor(Math.random() * 52);
            var pickedSuit = Math.floor(pickedCard / 13);
            console.log('pickedSuit=', pickedSuit);
            console.log('pickedCard=', pickedCard);
            return { suit: _this.suits[pickedSuit], card: pickedCard % 13 };
        };
    }
};
var cardPicker2 = deck2.createCardPicker();
var pickedCard2 = cardPicker2();
console.log("card: " + pickedCard2.card + " of " + pickedCard2.suit);
var Handler = /** @class */ (function () {
    function Handler() {
    }
    Handler.prototype.onClickBad = function (e) {
        // oops, used this here. using this callback would crash at runtime
        // this.info = e.message;
    };
    return Handler;
}());
var h = new Handler();
var uiElement = document.getElementById('id');
uiElement.addEventListener('click', h.onClickBad); // error!
/*
重载
    JavaScript本身是个动态语言。
    JavaScript里函数根据传入不同的参数而返回不同类型的数据是很常见的。
*/
var suits = ["hearts", "spades", "clubs", "diamonds"];
function pickCard(x) {
    // Check to see if we're working with an object/array
    // if so, they gave us the deck and we'll pick the card
    if (typeof x == "object") {
        var pickedCard = Math.floor(Math.random() * x.length);
        return pickedCard;
    }
    // Otherwise just let them pick the card
    else if (typeof x == "number") {
        var pickedSuit = Math.floor(x / 13);
        return { suit: suits[pickedSuit], card: x % 13 };
    }
}
var myDeck = [{ suit: "diamonds", card: 2 }, { suit: "spades", card: 10 }, { suit: "hearts", card: 4 }];
var pickedCard3 = myDeck[pickCard(myDeck)];
console.log("card: " + pickedCard3.card + " of " + pickedCard3.suit);
var pickedCard4 = pickCard(15);
console.log("card: " + pickedCard4.card + " of " + pickedCard4.suit);
/*
pickCard方法根据传入参数的不同会返回两种不同的类型。
如果传入的是代表纸牌的对象，函数作用是从中抓一张牌。
如果用户想抓牌，我们告诉他抓到了什么牌。
但是这怎么在类型系统里表示呢。

方法是为同一个函数提供多个函数类型定义来进行函数重载。
编译器会根据这个列表去处理函数的调用。
下面我们来重载 pickCard函数。
*/
var suits2 = ["hearts", "spades", "clubs", "diamonds"];
function pickCard2(x) {
    return 1;
}
;
function pickCard3(x) { }
;
function pickCard4(x) {
    // Check to see if we're working with an object/array
    // if so, they gave us the deck and we'll pick the card
    if (typeof x == "object") {
        var pickedCard = Math.floor(Math.random() * x.length);
        return pickedCard;
    }
    // Otherwise just let them pick the card
    else if (typeof x == "number") {
        var pickedSuit = Math.floor(x / 13);
        return { suit: suits[pickedSuit], card: x % 13 };
    }
}
var myDeck4 = [{ suit: "diamonds", card: 2 }, { suit: "spades", card: 10 }, { suit: "hearts", card: 4 }];
var pickedCard5 = myDeck[pickCard(myDeck)];
alert("card: " + pickedCard1.card + " of " + pickedCard1.suit);
var pickedCard6 = pickCard(15);
alert("card: " + pickedCard2.card + " of " + pickedCard2.suit);

//# sourceMappingURL=data:application/json;charset=utf8;base64,
